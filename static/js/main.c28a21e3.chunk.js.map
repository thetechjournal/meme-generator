{"version":3,"sources":["components/Header.js","components/MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","React","Component","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","onSubmit","type","placeholder","onChange","src","alt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAeeA,G,4KAVP,OACI,wBAAQC,UAAU,aAAlB,SACI,qD,GAJKC,IAAMC,Y,eCoEZC,E,kDAnEX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,QAAS,GACTC,WAAY,GACZC,UAAW,gCACXC,YAAa,IAEjB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATV,E,gEAYO,IAAD,OAChBE,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAS,CAAEV,YAAaQ,S,mCAI5BG,GAAQ,IAAD,EACMA,EAAMC,OAArBC,EADS,EACTA,KAAMC,EADG,EACHA,MACbC,KAAKL,SAAL,eAAiBG,EAAOC,M,mCAGfH,GACTA,EAAMK,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,YAAYqB,QAC5DC,EAAcP,KAAKnB,MAAMI,YAAYiB,GAASM,IACpDR,KAAKL,SAAS,CAAEX,UAAWuB,M,+BAI3B,OACI,sBAAK9B,UAAU,UAAf,UACI,uBAAMA,UAAU,YAAYgC,SAAUT,KAAKZ,aAA3C,UACI,uBACIsB,KAAK,OACLZ,KAAK,UACLa,YAAY,WACZZ,MAAOC,KAAKnB,MAAMC,QAClB8B,SAAUZ,KAAKd,eAGnB,uBACIwB,KAAK,OACLZ,KAAK,aACLa,YAAY,cACZZ,MAAOC,KAAKnB,MAAME,WAClB6B,SAAUZ,KAAKd,eAGnB,4CAEJ,sBAAKT,UAAU,OAAf,UACI,qBAAKoC,IAAKb,KAAKnB,MAAMG,UAAW8B,IAAI,KACpC,oBAAIrC,UAAU,MAAd,SAAqBuB,KAAKnB,MAAMC,UAChC,oBAAIL,UAAU,SAAd,SAAwBuB,KAAKnB,MAAME,uB,GA3D3BL,IAAMC,WCUnBoC,MATf,WACE,OACE,sBAAKtC,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.c28a21e3.chunk.js","sourcesContent":["import React from 'react'\nimport '../App.css';\n\nclass Header extends React.Component {\n    render(){\n        return(\n            <header className=\"header-mem\">\n                <p>Meme Generator</p>\n            </header>\n        )\n    }\n\n\n}\n\nexport default Header","import React from 'react'\nimport '../App.css';\n\nclass MemeGenerator extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            topText: \"\",\n            bottomText: \"\",\n            randomImg: \"http://i.imgflip.com/1bij.jpg\",\n            allMemeImgs: []\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    componentDidMount() {\n        fetch(\"https://api.imgflip.com/get_memes\")\n            .then(response => response.json())\n            .then(response => {\n                const {memes} = response.data\n                this.setState({ allMemeImgs: memes })\n            })\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target\n        this.setState({ [name]: value })\n    }\n    \n    handleSubmit(event) {\n        event.preventDefault()\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\n        const randMemeImg = this.state.allMemeImgs[randNum].url\n        this.setState({ randomImg: randMemeImg })\n    }\n\n    render(){\n        return(\n            <div className=\"mem-gen\">\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\n                    <input \n                        type=\"text\"\n                        name=\"topText\" \n                        placeholder=\"Top Text\"\n                        value={this.state.topText}\n                        onChange={this.handleChange}\n                    >\n                    </input>\n                    <input \n                        type=\"text\" \n                        name=\"bottomText\" \n                        placeholder=\"Bottom Text\"\n                        value={this.state.bottomText}\n                        onChange={this.handleChange}\n                    >\n                    </input>\n                    <button>Gen</button>\n                </form>\n                <div className=\"meme\">\n                    <img src={this.state.randomImg} alt=\"\" />\n                    <h2 className=\"top\">{this.state.topText}</h2>\n                    <h2 className=\"bottom\">{this.state.bottomText}</h2>\n                </div>\n            </div>\n        )\n    }\n\n\n}\n\nexport default MemeGenerator","import Header from './components/Header'\nimport MemeGenerator from './components/MemeGenerator';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <MemeGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}